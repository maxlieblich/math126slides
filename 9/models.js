// Generated by CoffeeScript 1.4.0
(function() {
  var firstdemo, plotstickers1, plotstickers2, plotstickers3;

  plotstickers1 = function() {
    var gui, multiplecontrol, powercontrol, snail, spiral;
    spiral = function() {
      this.power = 1;
      this.multiple = 2;
      this.render = function(p, m) {
        var d1, data, nut, options, t;
        d1 = [];
        t = 0;
        while (t <= m * Math.PI) {
          d1.push([Math.pow(t, p) * Math.cos(t), Math.pow(t, p) * Math.sin(t)]);
          t += 0.01;
        }
        data = [d1];
        nut = Math.max(Math.pow(this.multiple * Math.PI, this.power), 1 / Math.pow(this.multiple * Math.PI, this.power));
        options = {
          series: {
            lines: {
              show: true,
              shadowSize: 0
            }
          },
          xaxis: {
            max: nut,
            min: -nut
          },
          yaxis: {
            max: nut,
            min: -nut
          }
        };
        $.plot($("#plotstickers1"), data, options);
        return null;
      };
      return null;
    };
    snail = new spiral();
    gui = new dat.GUI({
      autoPlace: false
    });
    $("#plotstickers1controls").append(gui.domElement);
    powercontrol = gui.add(snail, "power", -2, 3);
    multiplecontrol = gui.add(snail, "multiple", 1, 10);
    snail.render(snail.power, snail.multiple);
    powercontrol.onChange(function(value) {
      snail.render(value, snail.multiple);
      return null;
    });
    multiplecontrol.onChange(function(value) {
      snail.render(snail.power, value);
      return null;
    });
    return null;
  };

  plotstickers1();

  plotstickers2 = function() {
    var bowl, gui, multiplecontrol, powercontrol, yummy;
    yummy = function() {
      this.love = 8 / 5;
      this.multiple = 10;
      this.render = function(p, m) {
        var d1, data, options, t;
        d1 = [];
        t = 0;
        while (t <= m * Math.PI) {
          d1.push([Math.sin(p * t) * Math.cos(t), Math.sin(p * t) * Math.sin(t)]);
          t += 0.01;
        }
        data = [d1];
        options = {
          series: {
            lines: {
              show: true,
              shadowSize: 0
            }
          },
          xaxis: {
            max: 1,
            min: -1
          },
          yaxis: {
            max: 1,
            min: -1
          }
        };
        $.plot($("#plotstickers2"), data, options);
        return null;
      };
      return null;
    };
    bowl = new yummy();
    gui = new dat.GUI({
      autoPlace: false
    });
    $("#plotstickers2controls").append(gui.domElement);
    powercontrol = gui.add(bowl, "love", 0, 5).step(0.1);
    multiplecontrol = gui.add(bowl, "multiple", 10, 50);
    bowl.render(bowl.love, bowl.multiple);
    powercontrol.onChange(function(value) {
      bowl.render(value, bowl.multiple);
      return null;
    });
    multiplecontrol.onChange(function(value) {
      bowl.render(bowl.love, value);
      return null;
    });
    return null;
  };

  plotstickers2();

  plotstickers3 = function() {
    var bowl, ccontrol, gui, jiggly, multiplecontrol, powercontrol;
    jiggly = function() {
      this.c = 1;
      this.love = 1;
      this.multiple = 2;
      this.render = function(c, p, m) {
        var d1, data, options, t;
        d1 = [];
        t = 0;
        while (t <= m * Math.PI) {
          d1.push([(c + Math.sin(p * t)) * Math.cos(t), (c + Math.sin(p * t)) * Math.sin(t)]);
          t += 0.01;
        }
        data = [d1];
        options = {
          series: {
            lines: {
              show: true,
              shadowSize: 0
            }
          },
          xaxis: {
            max: 6,
            min: -6
          },
          yaxis: {
            max: 6,
            min: -6
          }
        };
        $.plot($("#plotstickers3"), data, options);
        return null;
      };
      return null;
    };
    bowl = new jiggly();
    gui = new dat.GUI({
      autoPlace: false
    });
    $("#plotstickers3controls").append(gui.domElement);
    powercontrol = gui.add(bowl, "love", 0, 5).step(0.1);
    multiplecontrol = gui.add(bowl, "multiple", 1, 50);
    ccontrol = gui.add(bowl, "c", 0, 5);
    bowl.render(bowl.c, bowl.love, bowl.multiple);
    powercontrol.onChange(function(value) {
      bowl.render(bowl.c, value, bowl.multiple);
      return null;
    });
    multiplecontrol.onChange(function(value) {
      bowl.render(bowl.c, bowl.love, value);
      return null;
    });
    ccontrol.onChange(function(value) {
      bowl.render(value, bowl.love, bowl.multiple);
      return null;
    });
    return null;
  };

  plotstickers3();

  firstdemo = function() {
    var demo, graph, gui, previousPoint, rcontrol, showTooltip, thetacontrol;
    demo = function() {
      this.r = 1;
      this.theta = 0;
      this.render = function(rad, theta) {
        var d1, data, options, p1, t;
        d1 = [];
        p1 = [[rad * Math.cos(theta), rad * Math.sin(theta)]];
        t = 0;
        while (t <= 2 * Math.PI) {
          d1.push([rad * Math.cos(t), rad * Math.sin(t)]);
          t += 0.01;
        }
        data = [
          d1, {
            data: p1,
            color: "purple",
            hoverable: true,
            points: {
              show: true
            }
          }
        ];
        options = {
          series: {
            lines: {
              show: true,
              shadowSize: 0
            }
          },
          grid: {
            hoverable: true
          },
          xaxis: {
            max: 6,
            min: -6
          },
          yaxis: {
            max: 3.75,
            min: -3.75
          }
        };
        $.plot($("#democontainer"), data, options);
        return null;
      };
      return null;
    };
    graph = new demo();
    gui = new dat.GUI({
      autoPlace: false
    });
    $("#democontrols").append(gui.domElement);
    rcontrol = gui.add(graph, "r", 0, 3.5);
    thetacontrol = gui.add(graph, "theta", 0, 2 * Math.PI);
    graph.render(graph.r, graph.theta);
    rcontrol.onChange(function(value) {
      graph.render(value, graph.theta);
      return null;
    });
    thetacontrol.onChange(function(value) {
      graph.render(graph.r, value);
      return null;
    });
    showTooltip = function(x, y, contents) {
      $("<div id=\"tooltip\">" + contents + "</div>").css({
        position: "absolute",
        display: "none",
        top: y + 5,
        left: x + 5,
        border: "1px solid #fdd",
        padding: "2px",
        "background-color": "#fee",
        opacity: 0.80
      }).appendTo("body").fadeIn(200);
      return null;
    };
    previousPoint = null;
    $("#democontainer").bind("plothover", function(event, pos, item) {
      var x, y;
      $("#x").text(pos.x.toFixed(2));
      $("#y").text(pos.y.toFixed(2));
      if (item) {
        if (previousPoint !== item.dataIndex) {
          previousPoint = item.dataIndex;
          $("#tooltip").remove();
          x = item.datapoint[0].toFixed(2);
          y = item.datapoint[1].toFixed(2);
          showTooltip(item.pageX, item.pageY, "(" + x + "," + y + ")");
        }
      } else {
        $("#tooltip").remove();
      }
      return null;
    });
    return null;
  };

  firstdemo();

}).call(this);
